name: AI Self-Healing Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run build (example)
        id: build
        continue-on-error: true
        run: |
          echo "Running build..."
          npm install
          npm run build 2>&1 | tee build_logs.txt

      - name: Check if build failed
        id: check
        run: |
          if [ "${{ steps.build.outcome }}" = "failure" ]; then
            echo "build_failed=true" >> $GITHUB_ENV
          else
            echo "build_failed=false" >> $GITHUB_ENV
          fi

      - name: Analyze logs with ChatGPT
        if: env.build_failed == 'true'
        id: chatgpt
        run: |
          logs=$(tail -n 200 build_logs.txt | jq -Rs .)
          payload=$(jq -n --arg logs "$logs" '{
            model: "gpt-4o",
            messages: [
              { "role": "system", "content": "You are a DevOps expert. Analyze CI/CD logs and suggest a fix." },
              { "role": "user", "content": $logs }
            ]
          }')

          echo "Sending logs to ChatGPT..."
          response=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$payload")

          echo "$response" > chatgpt_output.json
          suggestion=$(jq -r '.choices[0].message.content' chatgpt_output.json)
          echo "AI Suggestion:"
          echo "$suggestion"
          echo "suggestion<<EOF" >> $GITHUB_ENV
          echo "$suggestion" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post AI suggestion as comment
        if: env.build_failed == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ai-suggestion
          message: |
            ⚙️ **ChatGPT Analysis**
            ${{ env.suggestion }}
